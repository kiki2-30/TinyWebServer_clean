╔══════════════════════════════════════════════════════════════╗
║      TinyWebServer 物理机迁移检查清单                        ║
╚══════════════════════════════════════════════════════════════╝

📦 一、准备阶段（在WSL2上）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[ ] 1. 确认代码完整性
    - [ ] 所有源文件存在
    - [ ] 已修改：threadpool/threadpool.h (队列大小20000)
    - [ ] 已创建：物理机部署指南.md
    - [ ] 已创建：物理机系统优化.sh
    - [ ] 已创建：物理机压测脚本.sh
    - [ ] 已创建：monitor.sh
    - [ ] 已创建：测试结果记录模板.md

[ ] 2. 修改硬编码路径（如果有）
    - [ ] 检查脚本中的 /home/kiki 路径
    - [ ] 确保使用相对路径或 $(pwd)

[ ] 3. 打包代码
    方式A: 使用tar
    ```bash
    cd /home/kiki
    tar -czf TinyWebServer.tar.gz TinyWebServer_clean/
    ```
    
    方式B: 使用git
    ```bash
    cd /home/kiki/TinyWebServer_clean
    git init
    git add .
    git commit -m "Ready for physical machine"
    ```

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🖥️  二、物理机环境准备
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[ ] 1. 检查系统信息
    ```bash
    cat /etc/os-release
    uname -r
    nproc  # CPU核心数
    free -h  # 内存大小
    ```
    
    记录：
    - 操作系统: ________________
    - 内核版本: ________________
    - CPU核心: ____
    - 内存: ________

[ ] 2. 安装必需软件
    Ubuntu/Debian:
    ```bash
    sudo apt-get update
    sudo apt-get install -y gcc g++ make mysql-server libmysqlclient-dev
    ```
    
    CentOS/RHEL:
    ```bash
    sudo yum install -y gcc gcc-c++ make mysql-server mysql-devel
    ```

[ ] 3. 配置MySQL数据库
    ```bash
    sudo systemctl start mysql
    sudo mysql_secure_installation  # 设置密码
    
    mysql -u root -p
    CREATE DATABASE yourdb;
    USE yourdb;
    CREATE TABLE user(
        username char(50) NULL,
        passwd char(50) NULL
    ) ENGINE=InnoDB;
    INSERT INTO user(username, passwd) VALUES('test', 'test123');
    ```
    
    记录MySQL信息：
    - 用户名: ________________
    - 密码: ________________
    - 数据库名: yourdb

[ ] 4. 传输代码到物理机
    方式A: scp
    ```bash
    scp TinyWebServer.tar.gz user@物理机IP:/home/user/
    ssh user@物理机IP
    tar -xzf TinyWebServer.tar.gz
    ```
    
    方式B: git
    ```bash
    ssh user@物理机IP
    git clone your_repo_url
    ```
    
    方式C: U盘/共享文件夹
    
    物理机代码路径: ________________

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔧 三、代码配置（在物理机上）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[ ] 1. 修改数据库配置
    ```bash
    cd ~/TinyWebServer_clean
    vim main.cpp
    ```
    
    修改：
    ```cpp
    string user = "你的MySQL用户名";
    string passwd = "你的MySQL密码";
    string databasename = "yourdb";
    ```

[ ] 2. 检查文件权限
    ```bash
    chmod +x *.sh
    chmod +x test_pressure/webbench-1.5/webbench
    ```

[ ] 3. 清理编译文件（如果有）
    ```bash
    make clean
    rm -f server
    ```

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚙️  四、系统优化（在物理机上）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[ ] 1. 运行系统优化脚本
    ```bash
    cd ~/TinyWebServer_clean
    sudo ./物理机系统优化.sh
    ```

[ ] 2. 验证优化结果
    ```bash
    cat /proc/sys/net/core/somaxconn  # 应为 32768
    cat /proc/sys/net/ipv4/tcp_max_syn_backlog  # 应为 32768
    ulimit -n  # 应为 65536（可能需要重新登录）
    ```

[ ] 3. 如需重新登录
    ```bash
    logout
    # 重新SSH登录
    ulimit -n  # 再次检查
    ```

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔨 五、编译和基础测试
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[ ] 1. 编译服务器
    ```bash
    cd ~/TinyWebServer_clean
    make
    ```
    
    [ ] 编译成功，生成 server 文件

[ ] 2. 编译WebBench
    ```bash
    cd test_pressure/webbench-1.5
    make clean && make
    cd ../..
    ```

[ ] 3. 启动测试
    ```bash
    ./server
    ```
    
    [ ] 服务器启动成功
    [ ] 无错误信息

[ ] 4. 浏览器访问测试
    在浏览器打开: http://物理机IP:9006
    
    [ ] 可以访问首页
    [ ] 可以查看图片
    [ ] 可以注册/登录

[ ] 5. 停止服务器
    ```bash
    Ctrl+C 或 pkill server
    ```

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📊 六、压力测试执行
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[ ] 1. 准备测试结果记录
    ```bash
    cp 测试结果记录模板.md 我的测试结果.md
    vim 我的测试结果.md  # 填写环境信息
    ```

[ ] 2. 运行自动化压测脚本
    ```bash
    ./物理机压测脚本.sh
    ```
    
    选择测试方案:
    [ ] 快速验证 (1000并发)
    [ ] 基准测试 (3000并发)
    [ ] 高负载 (5000并发)
    [ ] 极限测试 (10000并发)
    [ ] 超限冲击 (10500并发)
    [ ] 完整测试套件

[ ] 3. 使用监控脚本（可选）
    终端1:
    ```bash
    ./server -c 1 -m 1 -a 0 -s 32 -t 64
    ```
    
    终端2:
    ```bash
    ./monitor.sh
    ```
    
    终端3:
    ```bash
    cd test_pressure/webbench-1.5
    ./webbench -c 10500 -t 30 http://127.0.0.1:9006/judge.html
    ```

[ ] 4. 记录测试结果
    对于每次测试，记录：
    - [ ] 并发数
    - [ ] QPS
    - [ ] 成功率
    - [ ] CPU使用率
    - [ ] 内存使用
    - [ ] 观察到的问题

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📈 七、性能对比和分析
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[ ] 1. WSL2 vs 物理机对比
    
    3000并发测试结果：
    - WSL2 QPS: ________
    - 物理机 QPS: ________
    - 提升倍数: ________x

[ ] 2. 不同模式对比
    测试LT+LT, LT+ET, ET+ET模式
    
    最佳模式: ________
    原因: ________________

[ ] 3. 线程数优化
    测试 16, 32, 64, 128 线程
    
    最优线程数: ________
    原因: ________________

[ ] 4. 与原作者对比
    原作者: 93251 QPS (10500并发)
    我的测试: ________ QPS (10500并发)
    
    差距分析：
    [ ] 硬件差异
    [ ] 配置差异
    [ ] 测试方法差异
    [ ] 其他: ________________

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✅ 八、面试准备
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[ ] 1. 整理测试数据
    制作表格或图表展示：
    - [ ] 不同环境对比（WSL2 vs 物理机）
    - [ ] 不同并发数的性能曲线
    - [ ] 不同配置的性能对比

[ ] 2. 准备回答要点
    - [ ] 为什么要用两个环境测试？
    - [ ] 性能差异的原因是什么？
    - [ ] 遇到了哪些问题？如何解决？
    - [ ] 学到了什么？

[ ] 3. 准备话术
    参考：测试结果记录模板.md 最后的"面试准备"部分

[ ] 4. 截图保存
    - [ ] WebBench测试结果
    - [ ] 系统监控界面
    - [ ] 服务器运行状态

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📝 九、问题记录
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

遇到的问题和解决方案：

问题1: _____________________________________________________
解决: _____________________________________________________

问题2: _____________________________________________________
解决: _____________________________________________________

问题3: _____________________________________________________
解决: _____________________________________________________

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 十、完成确认
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[ ] 代码已成功迁移到物理机
[ ] 系统参数已优化
[ ] 编译成功，功能正常
[ ] 完成基础测试（1000并发）
[ ] 完成中等测试（3000并发）
[ ] 完成高负载测试（5000+并发）
[ ] 完成极限测试（10000+并发）
[ ] 测试结果已记录
[ ] 性能对比已完成
[ ] 面试材料已准备
[ ] 已保存测试截图

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

最终测试数据汇总：

WSL2环境（3000并发）: ________ QPS
物理机（3000并发）  : ________ QPS  (提升 ____x)
物理机（10500并发） : ________ QPS
最高成功率          : _______%

测试完成日期: ________________
测试人: ________________

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
祝测试顺利！Good Luck! 🚀
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

